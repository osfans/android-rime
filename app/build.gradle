apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 31
    ndkVersion "24.0.8215888"

    defaultConfig {
        applicationId "com.osfans.trime"
        minSdkVersion 21 // 21 is required for `readlinkat` for capnpproto
        targetSdkVersion 29
        versionCode 20220701
        versionName "3.2.7"
        setProperty("archivesBaseName", "trime-$versionName")
        resValue "string", "trime_url", getGitUrl()
        buildConfigField 'String', 'BUILD_INFO' , '"' + getBuildInfo() + '"'
        buildConfigField 'String', 'BUILD_VERSION' , '"' + "$versionName" + '-g'+ getGitVersion()+ '-' + getBuildDate()  +  '"'
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-android.txt'
            signingConfig signingConfigs.release
        }
    }

    // Use prebuilt JNI library if the 'app/prebuilt' exists
    //
    // Steps to generate the prebuilt directory:
    // $ ./gradlew app:assembleRelease
    // $ cp --recursive app/build/intermediates/stripped_native_libs/universalRelease/out/lib app/prebuilt
    if (file("prebuilt").exists()) {
        sourceSets.main.jniLibs.srcDirs = ['prebuilt']
    } else {
        externalNativeBuild.cmake.path = "src/main/jni/CMakeLists.txt"
    }

    def propsFile = rootProject.file('keystore.properties') //store release config in keystore.properties
    def configName = 'release'

    if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props!=null && props.containsKey('storeFile')) {
            android.signingConfigs[configName].storeFile = rootProject.file(props['storeFile'])
            android.signingConfigs[configName].storePassword = props['storePassword']
            android.signingConfigs[configName].keyAlias = props['keyAlias']
            android.signingConfigs[configName].keyPassword = props['keyPassword']
        }
    }

    buildFeatures {
        viewBinding true
    }

    externalNativeBuild {
        cmake {
            // TODO: upgrade to 3.18
            // see https://issuetracker.google.com/issues/187134648
            version "3.10.2"
        }
    }

    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }
}

dependencies {
    implementation "com.blankj:utilcodex:1.30.6"
    implementation "com.jakewharton.timber:timber:5.0.1"
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "androidx.appcompat:appcompat:1.3.0"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.constraintlayout:constraintlayout:2.1.2"
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation "androidx.fragment:fragment-ktx:1.4.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation "com.google.android.flexbox:flexbox:3.0.0"
}
repositories {
    mavenCentral()
}

def getBuildInfo(){
    def info =  'Build: ' + getGitUser()+ ' \\nDate: ' + getBuildTime()+ ' UTC \\nCommit: '+getCommitInfo()+ ' \\nBranch: '+ getGitBranch()+ ' \\nRepository: '+ getGitUrl()
    println( info)
    return info
}

def getBuildDate() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

def getBuildTime() {
    return new Date().format("yyyy-MM-dd HH:mm", TimeZone.getTimeZone("UTC"))
}

def getCommitInfo(){
    def text = ' git show --pretty=format:"%ci %cr"'.execute().text
    text =  (text =~ /${"\\n.*"}/).replaceAll("").trim()
    return ' git describe'.execute().text.trim() +  ", " + (text =~ /${"(?<=(\\s[+-](\\d{4}))).*"}/).replaceAll("").trim()
}

def getGitBranch(){
    ' git symbolic-ref --short -q HEAD'.execute().text.trim()
}

def getGitVersion() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def gitGitVersionCode() {
    try {
        return 'git rev-list HEAD --first-parent --count'.execute().text.trim().toInteger()
    }
    catch (ignored) {
        return 1
    }
}

def getGitUser() {
    def name = 'git config user.name'.execute().text.trim()
    if(name.length()<1)
        return System.getenv("CI_NAME")
    return name
}

def getGitUrl() {
    return 'git remote get-url  origin'.execute().text.trim().replaceFirst("\\.git\$","")
}
